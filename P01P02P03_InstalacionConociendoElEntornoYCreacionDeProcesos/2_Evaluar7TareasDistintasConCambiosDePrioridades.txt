/*
Evaluar 7 tareas distintas al cambiar prioridades
By MJJH, JJMM y JSZM
*/
#if CONFIG_FREERTOS_UNICORE
 static const BaseType_t app_cpu = 0;
#else
 static const BaseType_t app_cpu = 1;
#endif

// Mensaje para imprimir en la terminal
const char  msg[] = "Unidad Profesional Interdisciplinaria de Ingenieria Campus Zacatecas IPN";
const char msg1[] = "1";
const char msg2[] = "2";
const char msg3[] = "3";
const char msg4[] = "4";
const char msg5[] = "5";
const char msg6[] = "6";

// Definir los pines para cada tarea
const int pin1 = 2; // GPIO2
const int pin2 = 14; // GPIO14
const int pin3 = 15; // GPIO15
const int pin4 = 13; // GPIO13
const int pin5 = 12; // GPIO12
const int pin6 = 16; // GPIO16
const int pin7 = 0; // GPIO0

// Gestión de tareas
static TaskHandle_t tarea_1 = NULL;
static TaskHandle_t tarea_2 = NULL;
static TaskHandle_t tarea_3 = NULL;
static TaskHandle_t tarea_4 = NULL;
static TaskHandle_t tarea_5 = NULL;
static TaskHandle_t tarea_6 = NULL;
static TaskHandle_t tarea_7 = NULL;

/*----------Tareas----------------*/

// Tarea 01: Se imprime el mensaje y pone en alto el pin asignado
void tarea01 (void *parameter){
  int msg_leng = strlen(msg);
  pinMode(pin1, OUTPUT);
  while(1){
    digitalWrite(pin1, HIGH);  // Pone el pin en alto
    Serial.println();
    for(int i = 0; i < msg_leng; i++){
      Serial.print(msg[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    digitalWrite(pin1, LOW);  // Apaga el pin
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void tarea02 (void *parameter){
  int msg1_leng = strlen(msg1);
  pinMode(pin2, OUTPUT);
  while(1){
    digitalWrite(pin2, HIGH);  // Pone el pin en alto
    Serial.println();
    for(int i = 0; i < msg1_leng; i++){
      Serial.print(msg1[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    digitalWrite(pin2, LOW);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void tarea03 (void *parameter){
  int msg2_leng = strlen(msg2);
  pinMode(pin3, OUTPUT);
  while(1){
    digitalWrite(pin3, HIGH);  // Pone el pin en alto
    Serial.println();
    for(int i = 0; i < msg2_leng; i++){
      Serial.print(msg2[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    digitalWrite(pin3, LOW);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void tarea04 (void *parameter){
  int msg3_leng = strlen(msg3);
  pinMode(pin4, OUTPUT);
  while(1){
    digitalWrite(pin4, HIGH);  // Pone el pin en alto
    Serial.println();
    for(int i = 0; i < msg3_leng; i++){
      Serial.print(msg3[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    digitalWrite(pin4, LOW);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void tarea05 (void *parameter){
  int msg4_leng = strlen(msg4);
  pinMode(pin5, OUTPUT);
  while(1){
    digitalWrite(pin5, HIGH);  // Pone el pin en alto
    Serial.println();
    for(int i = 0; i < msg4_leng; i++){
      Serial.print(msg4[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    digitalWrite(pin5, LOW);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void tarea06 (void *parameter){
  int msg5_leng = strlen(msg5);
  pinMode(pin6, OUTPUT);
  while(1){
    digitalWrite(pin6, HIGH);  // Pone el pin en alto
    Serial.println();
    for(int i = 0; i < msg5_leng; i++){
      Serial.print(msg5[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    digitalWrite(pin6, LOW);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}
void tarea07 (void *parameter){
  int msg6_leng = strlen(msg6);
  pinMode(pin7, OUTPUT);
  while(1){
    digitalWrite(pin7, HIGH); // Pone el pin en alto
    Serial.println();
    for(int i = 0; i < msg6_leng; i++){
      Serial.print(msg6[i]);
    }
    Serial.println();
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    digitalWrite(pin7, LOW);
    vTaskDelay(1000 / portTICK_PERIOD_MS);
  }
}

void setup(){
  Serial.begin(300);
  vTaskDelay(1000 / portTICK_PERIOD_MS);
  Serial.println();

  xTaskCreatePinnedToCore(tarea01, "Tarea 1", 1024, NULL, 3, &tarea_1, app_cpu); // Crear la tarea para el mensaje 1
  xTaskCreatePinnedToCore(tarea02, "Tarea 2", 1024, NULL, 5, &tarea_2, app_cpu); // Crear la tarea para el mensaje 2
  xTaskCreatePinnedToCore(tarea03, "Tarea 3", 1024, NULL, 4, &tarea_3, app_cpu); // Crear la tarea para el mensaje 3
  xTaskCreatePinnedToCore(tarea04, "Tarea 4", 1024, NULL, 1, &tarea_4, app_cpu); // Crear la tarea para el mensaje 4
  xTaskCreatePinnedToCore(tarea05, "Tarea 5", 1024, NULL, 6, &tarea_5, app_cpu); // Crear la tarea para el mensaje 5
  xTaskCreatePinnedToCore(tarea06, "Tarea 6", 1024, NULL, 7, &tarea_6, app_cpu); // Crear la tarea para el mensaje 6
  xTaskCreatePinnedToCore(tarea07, "Tarea 7", 1024, NULL, 2, &tarea_6, app_cpu); // Crear la tarea para el mensaje 7
}

void loop(){
  // El código en loop puede quedarse vacío ya que las tareas se ejecutan por FreeRTOS
}